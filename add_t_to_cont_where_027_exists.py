# -*- coding: utf-8 -*-
"""Add_t_to_Cont_Where_027_Exists.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uQ7Xjus3uaxc8QRBHCQFiXQN3IbBPWgn
"""

import pandas as pd
from google.colab import drive
drive.mount('/content/drive/')

!ls

pip install pymarc

# Access WSKey ClientID and Secret
with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/metadata2_config.yml", 'r') as stream:
    config = yaml.safe_load(stream)

# Grab API service URL, set scope, create token
serviceURL = config.get('metadata_service_url')

scope = ['WorldCatMetadataAPI:manage_bibs'] # Note that scope is set to work with bibs

auth = HTTPBasicAuth(config.get('key'), config.get('secret'))
client = BackendApplicationClient(client_id=config.get('key'), scope=scope)
wskey = OAuth2Session(client=client)

token = wskey.fetch_token(token_url=config.get('token_url'), auth=auth)
print(token)

def generate_t_in_00824(marc_file):
    with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/response.mrc", "rb") as fh:
        reader = MARCReader(fh)
        for record in reader:
            old_fields = record.get_fields('008')
            for old_field in old_fields:
                content_008 = old_field.format_field()
                list_008 = list(content_008)
                if list_008[24] == ' ':
                  list_008[24] = 't'
                new008_content = ''.join(list_008)
                record.remove_field(old_field)
            new_008_field = Field(
                tag='008',
                data=f"{new008_content}"
            )
            return new_008_field

def generate_t_in_00825(marc_file):
    with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/response.mrc", "rb") as fh:
        reader = MARCReader(fh)
        for record in reader:
            old_fields = record.get_fields('008')
            for old_field in old_fields:
                content_008 = old_field.format_field()
                list_008 = list(content_008)
                if list_008[25] == ' ':
                  list_008[25] = 't'
                new008_content = ''.join(list_008)
                record.remove_field(old_field)
            new_008_field = Field(
                tag='008',
                data=f"{new008_content}"
            )
            return new_008_field

def generate_t_in_00826(marc_file):
    with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/response.mrc", "rb") as fh:
        reader = MARCReader(fh)
        for record in reader:
            old_fields = record.get_fields('008')
            for old_field in old_fields:
                content_008 = old_field.format_field()
                list_008 = list(content_008)
                if list_008[26] == ' ':
                  list_008[26] = 't'
                new008_content = ''.join(list_008)
                record.remove_field(old_field)
            new_008_field = Field(
                tag='008',
                data=f"{new008_content}"
            )
            return new_008_field

def generate_t_in_00827(marc_file):
    with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/response.mrc", "rb") as fh:
        reader = MARCReader(fh)
        for record in reader:
            old_fields = record.get_fields('008')
            for old_field in old_fields:
                content_008 = old_field.format_field()
                list_008 = list(content_008)
                if list_008[27] == ' ':
                  list_008[27] = 't'
                new008_content = ''.join(list_008)
                record.remove_field(old_field)
            new_008_field = Field(
                tag='008',
                data=f"{new008_content}"
            )
            return new_008_field

def write_edited_marc_file(marc_file):
    writer = MARCWriter(open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/edited.mrc", "wb"))
    writer.write(marc_file)
    writer.close()

def write_chunk(control_num, response):
    with open('/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/track_response_codes.csv', 'a') as response_codes:
        writer = csv.writer(response_codes)
        writer.writerow([control_num, response])

with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/DataforAPIOnboarding/Field027sTest.csv") as csv_file:
    reader = csv.DictReader(csv_file)
    for line in reader:
        ocn = line["ocn"] # "ocn" is the header of the column in the csv file

        print("working on:", ocn)

        # Send GET request
        try:
            r = wskey.get(serviceURL + f"/manage/bibs/{ocn}", headers={'Accept': 'application/marc'})
            r.raise_for_status()

            # Write MARC from API to mrc file on local machine
            with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/response.mrc", "wb") as start_file:
                start_file.write(r.content)

            with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/response.mrc", "rb") as fh:
                reader = MARCReader(fh)
                for record in reader:
                    field_008_content = record['008']
                    # print(field_008_content)
                    string_008 = field_008_content.format_field()
                    list_008 = list(string_008)
                    cont1 = list_008[24]
                    cont2 = list_008[25]
                    cont3 = list_008[26]
                    cont4 = list_008[27]
                    if cont1 == ' ':
                        old_field = record['008']
                        record.remove_field(old_field)
                        new_008_field = generate_t_in_00824(fh)
                        record.add_ordered_field(new_008_field)
                        write_edited_marc_file(record)
                    elif cont2 == ' ':
                        old_field = record['008']
                        record.remove_field(old_field)
                        new_008_field = generate_t_in_00825(fh)
                        record.add_ordered_field(new_008_field)
                        write_edited_marc_file(record)
                    elif cont3 == ' ':
                        old_field = record['008']
                        record.remove_field(old_field)
                        new_008_field = generate_t_in_00826(fh)
                        record.add_ordered_field(new_008_field)
                        write_edited_marc_file(record)
                    elif cont4 == ' ':
                        old_field = record['008']
                        record.remove_field(old_field)
                        new_008_field = generate_t_in_00827(fh)
                        record.add_ordered_field(new_008_field)
                        write_edited_marc_file(record)
                    else:
                        with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/errors.csv", "a") as error_file:
                            writer = csv.writer(error_file)
                            writer.writerow(ocn)

            with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/edited.mrc", "rb") as updated_record:
                reader2 = MARCReader(updated_record)
                for record in reader2:
                    response = wskey.put(serviceURL + f"/manage/bibs/{ocn}", data=record.as_marc(), headers={'Content-Type': 'application/marc'})
                reader2.close()
            print(response)
            write_chunk(ocn, response)
        except requests.exceptions.HTTPError as err:
            print(err)
        except BaseException as err:
            print(err)