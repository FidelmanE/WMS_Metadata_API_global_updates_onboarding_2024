# -*- coding: utf-8 -*-
"""Add 338 to Microform Monographs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ubLtqbgPhtUa-29l2QUbrLBgvyaE_xZ6
"""

import pandas as pd
from google.colab import drive
drive.mount('/content/drive/')

!ls

pip install pymarc

#pip install bookops-worldcat

"""Training 4: Microfilm and Microfiche 338's"""

import csv
import requests
import yaml
from oauthlib.oauth2 import BackendApplicationClient
from pymarc import MARCReader, MARCWriter, Field, Subfield
from requests.auth import HTTPBasicAuth
from requests_oauthlib import OAuth2Session

# Access WSKey ClientID and Secret
with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/Add 338 to Microform Monographs/metadata2_config.yml", 'r') as stream:
    config = yaml.safe_load(stream)

# Grab API service URL, set scope, create token
serviceURL = config.get('metadata_service_url')

scope = ['WorldCatMetadataAPI:manage_bibs'] # Note that scope is set to work with bibs

auth = HTTPBasicAuth(config.get('key'), config.get('secret'))
client = BackendApplicationClient(client_id=config.get('key'), scope=scope)
wskey = OAuth2Session(client=client)

token = wskey.fetch_token(token_url=config.get('token_url'), auth=auth)
print(token)

def generate_microfilm_338_field(marc_file):
    new_338_field = Field(
        tag='338',
        indicators = [' ',' '],
        subfields = [
            Subfield(code='a', value="microfilm reel"),
            Subfield(code='b', value="hd"),
            Subfield(code='2', value="rdacarrier")
        ]
    )
    return new_338_field

def generate_microfiche_338_field(marc_file):
    new_338_field = Field(
        tag='338',
        indicators = [' ',' '],
        subfields = [
            Subfield(code='a', value="microfiche"),
            Subfield(code='b', value="he"),
            Subfield(code='2', value="rdacarrier")
        ]
    )
    return new_338_field

def write_edited_marc_file(marc_file):
    writer = MARCWriter(open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/Add 338 to Microform Monographs/edited.mrc", "wb"))
    writer.write(marc_file)
    writer.close()

def write_chunk(control_num, response):
    with open('/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/Add 338 to Microform Monographs/track_response_codes.csv', 'a') as response_codes:
        writer = csv.writer(response_codes)
        writer.writerow([control_num, response])

with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/DataforAPIOnboarding/PymarcMicroformsNo338.csv") as csv_file:
    reader = csv.DictReader(csv_file)
    for line in reader:
        ocn = line["ocn"] # "ocn" is the header of the column in the csv file

        print("working on:", ocn)

        # Send GET request
        try:
            r = wskey.get(serviceURL + f"/manage/bibs/{ocn}", headers={'Accept': 'application/marc'})
            r.raise_for_status()

            # Write MARC from API to mrc file on local machine
            with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/Add 338 to Microform Monographs/response.mrc", "wb") as start_file:
                start_file.write(r.content)

            with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/Add 338 to Microform Monographs/response.mrc", "rb") as fh:
                reader = MARCReader(fh)
                for record in reader:
                    field_008_content = record['008']
                    # print(field_008_content)
                    string_008 = field_008_content.format_field()
                    list_008 = list(string_008)
                    item_form = list_008[23]
                    if item_form == 'a':
                        new_338_field = generate_microfilm_338_field(fh)
                        record.add_ordered_field(new_338_field)
                        write_edited_marc_file(record)
                    elif item_form == 'b':
                        new_338_field = generate_microfiche_338_field(fh)
                        record.add_ordered_field(new_338_field)
                        write_edited_marc_file(record)
                    else:
                        with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/Add 338 to Microform Monographs/errors.csv", "a") as error_file:
                            writer = csv.writer(error_file)
                            writer.writerow(ocn)

            with open("/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/Add 338 to Microform Monographs/edited.mrc", "rb") as updated_record:
                reader2 = MARCReader(updated_record)
                for record in reader2:
                    response = wskey.put(serviceURL + f"/manage/bibs/{ocn}", data=record.as_marc(), headers={'Content-Type': 'application/marc'})
                reader2.close()
            print(response)
            write_chunk(ocn, response)
        except requests.exceptions.HTTPError as err:
            print(err)
        except BaseException as err:
            print(err)