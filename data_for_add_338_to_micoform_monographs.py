# -*- coding: utf-8 -*-
"""DataForAdd338toMicoformMonographs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14vRTto47nJM9ERXgjM8P2C5uLEn1n-AC
"""

import pandas as pd
from google.colab import drive
drive.mount('/content/drive/')

!ls

"""MARCEdit process for identifying OCN's for Monographs missing 338"""

PrintMARC = pd.read_table('/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/DataforAPIOnboarding/Add338.txt', header=0, delimiter='\t', low_memory=False, encoding = 'ISO-8859-1')

column_names = list(PrintMARC.columns.values)
print(column_names)

PrintMARC.head(15)

import sqlite3

conn = sqlite3.connect("MonographsWithNo338.db")

cursor = conn.cursor()

cursor.execute("DROP TABLE IF EXISTS MonographsWithNo338")

PrintMARC.to_sql("Print", conn, if_exists='replace', index=False)

Bibs = pd.read_sql("""SELECT * FROM Print WHERE [000$06] Not In ('u','v','x','y')""", conn)

Bibs.head(5)

Bibs.to_sql("Bibs", conn, if_exists='replace', index=False)

#BooksNo338Notabo = pd.read_sql("""SELECT * FROM Bibs WHERE [338] IS NULL AND [000$06] == 'a'AND [000$07] == 'm' AND [008$23] Not In ('a','b','o')""", conn)

#BooksNo338Notabo.head(5)

#BooksNo338Notabo.to_sql("BooksNo338Notabo", conn, if_exists='replace', index=False)

#BooksNo338Notabo00823 = pd.read_sql("""SELECT DISTINCT([008$23]) FROM BooksNo338Notabo""", conn)

#BooksNo338Notabo00823.head(15)

BooksNo338rblank = pd.read_sql("""SELECT * FROM Bibs WHERE [338] IS NULL AND [000$06] == 'a' AND [000$07] == 'm' AND [008$23] In ('r','/')""", conn)

BooksNo338rblank.to_sql("BooksNo338rblank", conn, if_exists='replace', index=False)

BooksNo338rblank.head(5)

BooksNo338rblank = BooksNo338rblank.rename(columns={'001':'ocn'})

BooksNo338rblankOCNs = BooksNo338rblank['ocn']

BooksNo338rblankOCNs.head(5)

BooksNo338rblankOCNs = BooksNo338rblankOCNs.astype(str)
BooksNo338rblankOCNs = BooksNo338rblankOCNs.str.replace('ocm','')
BooksNo338rblankOCNs = BooksNo338rblankOCNs.str.replace('ocn','')
BooksNo338rblankOCNs = BooksNo338rblankOCNs.str.replace('on','')
BooksNo338rblankOCNs = BooksNo338rblankOCNs.str.replace('\\','')
BooksNo338rblankOCNs = BooksNo338rblankOCNs.str.strip()
BooksNo338rblankOCNs = BooksNo338rblankOCNs.str.lstrip('0')

BooksNo338rblankOCNs.head(5)

BooksNo338rblankOCNs.to_csv('/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/DataforAPIOnboarding/BooksNo338.csv', index=False)

"""Pymarc process for identifying OCN's of monographs missing 338"""

import shutil
import glob

with open('/content/drive/My Drive/Data Services/MARCSnapshots/202407/All202407.mrc', 'wb') as outfile:
    for i in glob.glob(r'/content/drive/My Drive/Data Services/MARCSnapshots/202407/Pymarc/*.mrc'):
    #this line takes every file with .mrc extension in c:/files/ folder and iterates them through a loop
        with open(i, 'rb') as readfile:
            shutil.copyfileobj(readfile, outfile)

pip install pymarc

import csv

csv_out = csv.writer(open('/content/drive/My Drive/Data Services/MARCSnapshots/202407/LHRs.csv', 'w'), delimiter = ',', quotechar = '"', quoting = csv.QUOTE_MINIMAL)

from pymarc import MARCReader

with open('/content/drive/My Drive/Data Services/MARCSnapshots/202407/All202407.mrc', 'rb') as fh:
    reader = MARCReader(fh)
    for record in reader:
      try:
        if record['001'] is not None:
          LCN = record['001']
          LCN = str(LCN).replace('=001', '')
          LDR06 = record.leader[6]
          LOCN = record['004']
          LOCN = str(LOCN).replace('=004 ', '')
          Code = (record['852']['a'])
          Location = (record['852']['b'])
        csv_out.writerow([LCN, LDR06, LOCN, Code, Location])
      except KeyError:
            pass

import csv
import numpy as np

csv_out = csv.writer(open('/content/drive/My Drive/Data Services/MARCSnapshots/202407/ProtoBibs.csv', 'w'), delimiter = ',', quotechar = '"', quoting = csv.QUOTE_MINIMAL)

from pymarc import MARCReader

with open('/content/drive/My Drive/Data Services/MARCSnapshots/202407/All202407.mrc', 'rb') as fh:
    reader = MARCReader(fh)
    for record in reader:
      try:
        OCN = record['001']
        OCN = str(OCN).replace('=001', '')
        LDR06 = record.leader[6]
        LDR07 = record.leader[7]
        for field in record.get_fields('008'):
          field008data = field.value()
          field00823 = field008data[23]
        carriers = record.get_fields('338')
        if not carriers:
          csv_out.writerow([OCN, LDR06, LDR07, field00823])
        else:
            for carrier in carriers:
              csv_out.writerow([OCN, LDR06, LDR07, field00823, carrier])
      except KeyError:
            pass

colnames = ['OCN', 'LDR06', 'LDR07', '00823','338']
field338s = pd.read_csv('/content/drive/My Drive/Data Services/MARCSnapshots/202407/ProtoBibs.csv', names=colnames)
column_headers = list(field338s.columns.values)
print(column_headers)

field338s.head(5)

field338s['338'] = field338s['338'].str.replace('=338 ', '')

field338s['338'].fillna("No carrier", inplace = True)

field338s = field338s.groupby('OCN').agg({'LDR06':'first', 'LDR07':'first', '00823':'first', '338': '; '.join}).reset_index()

field338s.head(5)

len(field338s)

field338s.to_csv('/content/drive/My Drive/Data Services/MARCSnapshots/202407/Bibs.csv')

PymarcBibs = pd.read_csv('/content/drive/My Drive/Data Services/MARCSnapshots/202407/Bibs.csv')

colnamesb = ['LCN', 'LHRLDR06', 'LHROCN', 'Code','Location']
PymarcLHRs = pd.read_csv('/content/drive/My Drive/Data Services/MARCSnapshots/202407/LHRs.csv', names=colnamesb)

PymarcBibs.to_sql("PymarcBibs", conn, if_exists='replace', index=False)

PymarcBibs = pd.read_sql("""SELECT * FROM PymarcBibs WHERE [LDR06] Not In ('u','v','x','y')""", conn)

PymarcBibs.head(5)

PymarcLHRs['LHROCN'] = PymarcLHRs['LHROCN'].astype(str)
PymarcBibs['OCN'] = PymarcBibs['OCN'].astype(str)

PymarcBibs['OCN'] = PymarcBibs['OCN'].str.strip()
PymarcLHRs['LHROCN'] = PymarcLHRs['LHROCN'].str.strip()

PymarcBibs.to_sql("PymarcBibs", conn, if_exists='replace', index=False)

test = pd.read_sql("""SELECT * FROM PymarcBibs""", conn)

test.head(5)

PymarcLHRs.to_sql("PymarcLHRs", conn, if_exists='replace', index=False)

len(PymarcLHRs)

JoinedHoldings = pd.read_sql("""SELECT PymarcBibs.[OCN], PymarcBibs.[LDR06], PymarcBibs.[LDR07], PymarcBibs.[00823], PymarcBibs.[338], PymarcLHRs.[LCN], PymarcLHRs.[LHRLDR06], PymarcLHRs.[LHROCN], PymarcLHRs.[Code], PymarcLHRs.[Location] FROM PymarcBibs INNER JOIN PymarcLHRs ON PymarcBibs.[OCN]=PymarcLHRs.[LHROCN]""", conn)

JoinedHoldings.to_sql("JoinedHoldings", conn, if_exists='replace', index=False)

"""MARCEdit process for identifying OCN's for microforms with no 338"""

MicroformsNo338 = pd.read_sql("""SELECT DISTINCT([001]) FROM Bibs WHERE [338] Is Null AND [000$06] == 'a' AND [000$07] == 'm' AND ([008$23] =='a' OR [008$23] =='b')""", conn)

len(MicroformsNo338)

MicroformsNo338 = MicroformsNo338.rename(columns={'001':'ocn'})

MicroformsNo338.head(5)

MicroformsNo338['ocn']  = MicroformsNo338['ocn'].astype(str)
MicroformsNo338['ocn']  = MicroformsNo338['ocn'].str.replace('ocm','')
MicroformsNo338['ocn']  = MicroformsNo338['ocn'].str.replace('ocn','')
MicroformsNo338['ocn']  = MicroformsNo338['ocn'].str.replace('on','')
MicroformsNo338['ocn']  = MicroformsNo338['ocn'].str.replace('\\','')
MicroformsNo338['ocn']  = MicroformsNo338['ocn'].str.strip()
MicroformsNo338['ocn']  = MicroformsNo338['ocn'].str.lstrip('0')

MicroformsNo338.to_csv('/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/DataforAPIOnboarding/MicroformsNo338.csv', index=False)

MicroformsNo338.head(5)

"""Pymarc process for identifying OCN's for microforms with no 338"""

PymarcMicroformsNo338 = pd.read_sql("""SELECT DISTINCT([OCN]) FROM JoinedHoldings WHERE [338] Like 'No carrier%' AND [LDR06] == 'a' AND [LDR07] == 'm' AND (([00823] =='a') OR ([00823] == 'b'))""", conn)

len(PymarcMicroformsNo338)

PymarcMicroformsNo338 = PymarcMicroformsNo338.rename(columns={'OCN':'ocn'})

PymarcMicroformsNo338.head(5)

PymarcMicroformsNo338['ocn']  = PymarcMicroformsNo338['ocn'].astype(str)
PymarcMicroformsNo338['ocn']  = PymarcMicroformsNo338['ocn'].str.replace('ocm','')
PymarcMicroformsNo338['ocn']  = PymarcMicroformsNo338['ocn'].str.replace('ocn','')
PymarcMicroformsNo338['ocn']  = PymarcMicroformsNo338['ocn'].str.replace('on','')
PymarcMicroformsNo338['ocn']  = PymarcMicroformsNo338['ocn'].str.replace('\\','')
PymarcMicroformsNo338['ocn']  = PymarcMicroformsNo338['ocn'].str.strip()
PymarcMicroformsNo338['ocn']  = PymarcMicroformsNo338['ocn'].str.lstrip('0')

PymarcMicroformsNo338.to_csv('/content/drive/My Drive/Data Services/API Batch Edits On-Boarding/DataforAPIOnboarding/PymarcMicroformsNo338.csv', index=False)

"""Troubleshooting: Why are the following OCN's in Pymarc but not MARCEdit output (and they really are in Pymarc in March and late July and not MARCEdit in June or early July or again in August): 10339318 and 11176143

Looking at the 2739 not in MARCEdit results which I think is really a fucntion of not being in the index l4 results, while being in the pymarc results on the li: index, these seem to be LHR's that were created before 2015 in Voyager and transferred to a Bib for a different format.  The new Bib is picked up in li: but the LHR's Bib is not picked up in l4 because the LHR wasn't really created by WVU but rather by the migration.  This only happens when the LHR is transferred from one Bib to another, not every LHR created before 2015.  Looking at the 1844 in MARCEdit results but not pymarc, i.e. in l4 but not li, these seem to all be bound-withs.  This is because in pymarc we join to LHR's to get anything that is print, and these don't really join to the numbered LHR with the OCN in an 004, but rather to the container record.  They "have an LHR" that is a container, so they're in l4, but the LHR's don't select them out of the li: results right in that join. OCN in the LHR index does not retrieve a the LHR
"""
